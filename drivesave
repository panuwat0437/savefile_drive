var channelToken = "ylYb9YrenJb5P+Enk/8CSHwwwj9hrqc7WcjSzutj9gGaB3EvQqraQNgwrcMsVhupoTDoLz5xIPZl8TQ7mElLV4mVvM4/jcZwU36Z4HRHVuJo+hY+Nm77+N41h90QFS5LQViMh5/rzRfx5K0eDkQw9AdB04t89/1O/w1cDnyilFU=";
var gdrivefolderId = "1AXH3ghY_BXarY-bPLv3FSV4am-EnN6le";
var gdrivefolderImageId = "15BfmxTWfeAi1L7KMdSryt6LjJV5gpZSD";
var gdrivefolderVideoId = "1wult8SHJqo1B9VqO0JC1aGknHCTw7OMS";
var gdrivefolderAudioId = "1CXkgpI42eEwD45cA4mpzGGyYowb0i-CU";

function replyMsg(replyToken, mess, channelToken) {
  var url = 'https://api.line.me/v2/bot/message/reply';
  var opt = {
    'headers': {
      'Content-Type': 'application/json; charset=UTF-8',
      'Authorization': 'Bearer ' + channelToken,
    },
    'method': 'post',
    'payload': JSON.stringify({
      'replyToken': replyToken,
      'messages': mess
    })
  };
  UrlFetchApp.fetch(url, opt);
}

function toDrive(messageId, meType, mType, gdriveId, channelToken) {
  var url = "https://api-data.line.me/v2/bot/message/" + messageId + "/content";
  var headers = {
    "headers": { "Authorization": "Bearer " + channelToken }
  };
  var getcontent = UrlFetchApp.fetch(url, headers);
  var blob = getcontent.getBlob();
  var fileBlob = Utilities.newBlob(blob.getBytes(), meType, messageId + mType);
  var rid = DriveApp.getFolderById(gdriveId).createFile(fileBlob).getId();
  return x = 'https://drive.google.com/uc?id=' + rid;
}

function searchFilesByName(folderId, fileName) {
  var folder = DriveApp.getFolderById(folderId);
  var files = folder.searchFiles('title contains "' + fileName + '"');
  var fileDetails = [];
  while (files.hasNext()) {
    var file = files.next();
    var fileData = {
      name: file.getName(),
      url: 'https://drive.google.com/file/d/' + file.getId() + '/view',
    };
    fileDetails.push(fileData['name']);
    fileDetails.push(fileData['url']);
  }
  fileDetails.sort(function (a, b) {
    return new Date(b.date) - new Date(a.date);
  });
  return fileDetails;
}


function getAllFileNames(fileName) {
  var allFileNames = [];
  allFileNames.push(searchFilesByName(gdrivefolderId, fileName));
  allFileNames.push(searchFilesByName(gdrivefolderImageId, fileName));
  allFileNames.push(searchFilesByName(gdrivefolderVideoId, fileName));
  allFileNames.push(searchFilesByName(gdrivefolderAudioId, fileName));
  allFileNames = allFileNames.flat();
  var resultString = '';
  for (let i = 0; i < allFileNames.length; i += 2) {
    const title = allFileNames[i];
    const link = allFileNames[i + 1];
    resultString += `${title}\nลิงก์: ${link}\n\n`;
  }
  return resultString;
}


function doPost(e) {
  var value = JSON.parse(e.postData.contents);
  var events = value.events;
  var event = events[0];
  var type = event.type;
  var replyToken = event.replyToken;
  switch (type) {
    case 'message':
      var messageType = event.message.type;
      var messageId = event.message.id;
      if (messageType == 'file') {
        var fileName = event.message.fileName;
        var fileType = fileName.split('.', 2)[1];
        var fileN = fileName.split('.', 2)[0];
        if (fileType == "pdf") { var mimetype = "application/pdf"; }
        else if (fileType == "zip") { var mimetype = "application/zip"; }
        else if (fileType == "rar") { var mimetype = "application/vnd.rar"; }
        else if (fileType == "7z") { var mimetype = "application/x-7z-compressed"; }
        else if (fileType == "doc") { var mimetype = "application/msword"; }
        else if (fileType == "xls") { var mimetype = "application/vnd.ms-excel"; }
        else if (fileType == "ppt") { var mimetype = "application/vnd.ms-powerpoint"; }
        else if (fileType == "docx") { var mimetype = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"; }
        else if (fileType == "xlsx") { var mimetype = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"; }
        else if (fileType == "pptx") { var mimetype = "application/vnd.openxmlformats-officedocument.presentationml.presentation"; }
        else if (fileType == "mp4") { var mimetype = "video/mp4"; }
        else if (fileType == "mp3") { var mimetype = "audio/mpeg"; }
        else if (fileType == "png") { var mimetype = "image/png"; }
        else if (fileType == "gif") { var mimetype = "image/gif"; }
        else if (fileType == "jpg") { var mimetype = "image/jpeg"; }
        else if (fileType == "jpeg") { var mimetype = "image/jpeg"; }
        else { var mimetype = "undefined"; }

        if (mimetype !== "undefined") {
          var url = "https://api-data.line.me/v2/bot/message/" + messageId + "/content";
          var headers = { "headers": { "Authorization": "Bearer " + channelToken } };
          var getcontent = UrlFetchApp.fetch(url, headers);
          var blob = getcontent.getBlob();
          var fileBlob = Utilities.newBlob(blob.getBytes(), mimetype, fileN + '.' + fileType);
          var gdfileid = DriveApp.getFolderById(gdrivefolderId).createFile(fileBlob).getId();
          var mess = [{ 'type': 'text', 'text': "https://drive.google.com/file/d/" + gdfileid + "/view" }];
        } else {
          var mess = [{ 'type': 'text', 'text': "ไม่รองรับไฟล์ประเภทนี้" }];
        }
      }
      else if (messageType == 'image') {
        var mType = ".jpg";
        var meType = "image/jpeg";
        var x = toDrive(messageId, meType, mType, gdrivefolderImageId, channelToken);
        var mess = [{ 'type': 'text', 'text': x }];
      }
      else if (messageType == 'video') {
        var mType = ".mp4";
        var meType = "video/mp4";
        var x = toDrive(messageId, meType, mType, gdrivefolderVideoId, channelToken);
        var mess = [{ 'type': 'text', 'text': x }];
      }
      else if (messageType == 'audio') {
        var mType = ".mp3";
        var meType = "audio/mpeg";
        var x = toDrive(messageId, meType, mType, gdrivefolderAudioId, channelToken);
        var mess = [{ 'type': 'text', 'text': x }];
      } else if (messageType == 'text') {
        var userMessage = event.message.text;
        var userMessagexx = getAllFileNames(userMessage)
        if (userMessagexx == "") {
          var mess = [{ 'type': 'text', 'text': 'ไม่พบไฟล์ที่ค้นหา' }];
        } else {
          var mess = [{ 'type': 'text', 'text': userMessagexx }];
        }
      }
      if (mess) { replyMsg(replyToken, mess, channelToken); }
      break;
    default:
      break;
  }
}

